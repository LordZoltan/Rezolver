using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Rezolver
{
    public static partial class LifetimeScopeRezolverExtensions
    {
        /// <summary>
        /// Retrieves a single instance that was previously added to the scope (or,
        /// optionally parent scopes) through a call to <see cref="ILifetimeScopeRezolver.AddToScope"/> 
        /// with a RezolveContext matching the one passed.
        /// 
        /// Note - if multiple matches are found in a single scope, an InvalidOperationException will be thrown.
        /// </summary>
        /// <param name="scope">Required.  The scope to be searched and optionally whose parent scopes
        /// are to be searched.</param>
        /// <param name="context">Required.  The context whose properties will be used to find the
        /// matching disposable.</param>
        public static object GetSingleFromScope(this ILifetimeScopeRezolver scope, RezolveContext context)
        {
            scope.MustNotBeNull("scope");
            context.MustNotBeNull("context");
            //this method is written in such a way as to avoid realising the enumerable to get the count
            //of items found.
            object result = null;

            var enumerable = scope.GetFromScope(context);
            var enumerator = enumerable.GetEnumerator();

            if (enumerator.MoveNext())
            {
                result = enumerator.Current;
                if (enumerator.MoveNext())
                    throw new InvalidOperationException(ExceptionResources.MoreThanOneObjectFoundInScope);
            }

            return result;
        }

        /// <summary>
        /// As the name suggests - this grabs the root scope for the scope on which this method is invoked.
        /// </summary>
        /// <param name="scope">The scope whose root scope is sought.  If null, then the method also returns null.</param>
        /// <returns>An <see cref="ILifetimeScopeRezolver"/> reference representing the top-level (root) scope
        /// for the passed scope.</returns>
        public static ILifetimeScopeRezolver GetScopeRoot(this ILifetimeScopeRezolver scope)
        {
            if (scope == null)
                return null;

            while (scope.ParentScope != null)
            {
                scope = scope.ParentScope;
            }

            return scope;
        }

        public static T GetOrAdd<T>(this ILifetimeScopeRezolver scope, RezolveContext context, Func<RezolveContext, T> factory, bool disposableOnly = true)
        {
            //this is a temporary implementation of this method for the time being which is not entirely thread-safe.
            //I'll make it part of the Interface and implement it properly eventually

            if (disposableOnly && !TypeHelpers.AreCompatible(typeof(T), typeof(IDisposable)))
                return factory(context);

            var obj = scope.GetSingleFromScope(context);
            if (obj == null)
                scope.AddToScope(obj = factory(context), context);

            return (T)obj;
        }

        /// <summary>
        /// This is primarily used by the dynamic code generated by RezolveTargetBase - if the scope is non-null
        /// and the instance is an IDiposable, then the object will be added to the scope.
        /// 
        /// The <paramref name="instance"/>, either way, is returned to simplify the function's use in dynamic code 
        /// produced from expression trees.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="scope"></param>
        /// <param name="instance"></param>
        /// <returns></returns>
        public static T TrackIfScopedAndDisposableAndReturn<T>(this ILifetimeScopeRezolver scope, T instance)
        {
            if (scope != null && instance is IDisposable)
                scope.AddToScope(instance);

            return instance;
        }
    }
}

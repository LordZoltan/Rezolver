<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) Zolution Software Ltd. All rights reserved.
// Licensed under the MIT License, see LICENSE.txt in the solution root for license information

// Generated by ExpressionTarget.CreateAndRegister.tt using ..\genericgenerator.t4 at <#= DateTime.UtcNow.ToString("ddd dd MMM, yyyy HH:mm:ss") #>
<#@ include file="..\genericgenerator.t4" #>
<#
var specs = new []{
	new GenericSpec { 
		Args = "TResult", 
		Signatures = new[] { null, "ResolveContext, TResult" } 
	},
	new GenericSpec {
		Args = "T1, TResult"
	},
	new GenericSpec {
		Args = "T2, TResult",
		Signatures = new[] { "ResolveContext, T2, TResult" }
	},
	new GenericSpec {
		Args = "T1, T2, TResult"
	},
	new GenericSpec {
		Args = "T2, T3, TResult",
		Signatures = new[] { "ResolveContext, T2, T3, TResult" }
	},
	new GenericSpec {
		Args = "T1, T2, T3, TResult"
	},
	new GenericSpec {
		Args = "T2, T3, T4, TResult",
		Signatures = new[] { "ResolveContext, T2, T3, T4, TResult" }
	},
	new GenericSpec {
		Args = "T1, T2, T3, T4, TResult"
	},
	new GenericSpec {
		Args = "T2, T3, T4, T5, TResult",
		Signatures = new[] { "ResolveContext, T2, T3, T4, T5, TResult" }
	},
	new GenericSpec {
		Args = "T1, T2, T3, T4, T5, TResult"
	},
};
	// If we need more, I can add them - but having all the func types covered just looks silly.
	// Developers can still use any delegate type they want - these classes are all about 
	// convenience when creating them directly without having to use 'new Func<blah>' in the
	// constructor.
#>

namespace Rezolver
{
	using System;
	using System.Linq.Expressions;
	using Rezolver.Targets;

	public static partial class Target
	{
<#
ForSpecs(specs, ForExpressionGroup);
#>
	}
} // namespace Rezolver.Targets

namespace Rezolver
{
	using System;
	using System.Linq.Expressions;
	using Rezolver.Targets;

	public static partial class ExpressionTargetContainerExtensions
	{
<#
	ForSpecs(specs, RegisterTargetGroup);
#>
	}
}

<#+
void TypeParamRef(GenericSpecArg arg)
{#>
		/// <typeparam name="<#= arg.Name #>"><#+ if(arg.Name != "TResult")
	{#>Type of the <#= arg.nthDescriptor #> parameter of the lambda expression.<#+}
	else{#>The return type of the lambda expression.<#+}#></typeparam>
<#+
}

void ForExpressionGroup(GenericSpec spec)
{
	//generates all ForExpression methods which apply to this generic specS
	ForSignatures(spec, ForExpression);
}

void ForExpression(Signature sig)
{
	if(sig.Args.Length > 1)
	{
		if(sig.Args[0] == "ResolveContext")
		{
#>

		/// <summary>Creates an <see cref="Rezolver.Targets.ExpressionTarget" /> for a lambda expression which takes a
		/// <see cref="ResolveContext" /><#= sig.Args.Length > 2 ? string.Format(" plus {0} other {1},", sig.Args.Length - 2, Pluralize(sig.Args.Length - 2, "argument", "arguments")) : "" #> and which returns
		/// an instance of <typeparamref name="TResult" /></summary>
<#+
		}
		else
		{
		#>
		/// <summary>Creates an <see cref="Rezolver.Targets.ExpressionTarget" /> for a lambda expression which takes <#= sig.Args.Length - 1#> <#= Pluralize(sig.Args.Length - 1, "argument", "arguments") #>
		/// and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
	}
	else
	{
#>
		/// <summary>Creates an <see cref="Rezolver.Targets.ExpressionTarget" /> for a parameterless lambda expression 
		/// which returns an instance of <typeparamref name="TResult" /></summary>
<#+
	}

	ForArgs(sig.Spec, TypeParamRef);
#>
		/// <param name="lambda">Required.  The lambda expression that is to be wrapped by the target.</param>
		/// <param name="declaredType">Optional.  The <see cref="ITarget.DeclaredType" /> of the target to be created,
		/// if different from <typeparamref name="TResult" /></param>
<#+
		if(sig.Args.Length > 1)
		{
#>
		/// <remarks>All arguments to the lambda are injected from the container when compiled and executed</remarks>
<#+
		}
#>
		public static ITarget ForExpression<<#= sig.Spec.Args #>>(Expression<Func<<#= sig.Text #>>> lambda, Type declaredType = null)
		{
			if(lambda == null) throw new ArgumentNullException(nameof(lambda));
			return new ExpressionTarget(lambda, declaredType);
		}
<#+
}



void RegisterTargetGroup(GenericSpec spec)
{
	//generates both RegisterTarget extension methods which apply to this generic spec
	ForSignatures(spec, RegisterTarget);
}

void RegisterTarget(Signature sig)
{	
if(sig.Args.Length > 1)
	{
		if(sig.Args[0] == "ResolveContext")
		{
#>

		/// <summary>Registers an <see cref="Rezolver.Targets.ExpressionTarget" /> built from a lambda expression which takes a 
		/// <see cref="ResolveContext" /><#= sig.Args.Length > 2 ? string.Format(" plus {0} other {1},", sig.Args.Length - 2, Pluralize(sig.Args.Length - 2, "argument", "arguments")) : "" #> and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
		else
		{
		#>
		/// <summary>Registers an <see cref="Rezolver.Targets.ExpressionTarget" /> built from a lambda expression which takes <#= sig.Args.Length - 1#> <#= Pluralize(sig.Args.Length - 1, "argument", "arguments") #>
		/// and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
	}
	else
	{
#>
		/// <summary>Registers an <see cref="Rezolver.Targets.ExpressionTarget" /> built from a parameterless lambda expression 
		/// which returns an instance of <typeparamref name="TResult" /></summary>
<#+
	}
	ForArgs(sig.Spec, TypeParamRef);
#>
		/// <param name="targets">Required.  The <see cref="ITargetContainer" /> into which the newly created target will be registered</param>
		/// <param name="lambda">Required.  The lambda expression which is to be compiled and executed when an instance is resolved by a container</param>
		/// <param name="declaredType">Optional.  The <see cref="ITarget.DeclaredType" /> of the target to be created
		/// if different from <typeparamref name="TResult" />.  Also overrides the type against which the registration will be made.</param>
<#+
		if(sig.Args.Length > 1)
		{
#>
		/// <remarks>All arguments to the lambda are injected from the container when compiled and executed</remarks>
<#+
		}
#>
		public static void RegisterExpression<<#= sig.Spec.Args #>>(this ITargetContainer targets, Expression<Func<<#= sig.Text #>>> lambda, Type declaredType = null)
		{
			targets.RegisterExpression((Expression)lambda, declaredType);
		}
<#+
}
#>

<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) Zolution Software Ltd. All rights reserved.
// Licensed under the MIT License, see LICENSE.txt in the solution root for license information

<#@ include file="..\genericgenerator.t4" #>
<#
var specs = new []{
	new GenericSpec { 
		Args = "TResult", 
		Signatures = new[] { null, "IResolveContext, TResult" } 
	},
	new GenericSpec {
		Args = "T1, TResult"
	},
	new GenericSpec {
		Args = "T1, T2, TResult"
	},
	new GenericSpec {
		Args = "T1, T2, T3, TResult"
	},
	new GenericSpec {
		Args = "T1, T2, T3, T4, TResult"
	},
	new GenericSpec {
		Args = "T1, T2, T3, T4, T5, TResult"
	},
};
	// If we need more, I can add them - but having all the func types covered just looks silly.
	// Developers can still use any delegate type they want - these classes are all about 
	// convenience when creating them directly without having to use 'new Func<blah>' in the
	// constructor.
#>

namespace Rezolver
{
	using System;
	using Rezolver.Targets;

	public static partial class Target
	{
<#
ForSpecs(specs, ForDelegateGroup);
#>
	}
} // namespace Rezolver.Targets

namespace Rezolver
{
	using System;
	using Rezolver.Targets;

	public static partial class DelegateTargetContainerExtensions
	{
<#
	ForSpecs(specs, RegisterTargetGroup);
#>
	}
}

<#+
void TypeParamRef(GenericSpecArg arg)
{#>
		/// <typeparam name="<#= arg.Name #>"><#+ if(arg.Name != "TResult")
	{#>Type of the <#= arg.nthDescriptor #> delegate parameter<#+}
	else{#>The type of the object produced by the factory delegate.<#+}#></typeparam>
<#+
}

void ForDelegateGroup(GenericSpec spec)
{
	//generates all ForDelegate methods which apply to this generic specS
	ForSignatures(spec, ForDelegate);
}

void ForDelegate(Signature sig)
{
	if(sig.Args.Length > 1)
	{
		if(sig.Args[0] == "IResolveContext")
		{
#>

		/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for a factory delegate which takes an 
		/// <see cref="IResolveContext" /><#= sig.Args.Length > 2 ? string.Format(" plus {0} other {1},", sig.Args.Length - 2, Pluralize(sig.Args.Length - 2, "argument", "arguments")) : "" #> and which returns
		/// an instance of <typeparamref name="TResult" /></summary>
<#+
		}
		else
		{
		#>
		/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for a factory delegate which takes <#= sig.Args.Length - 1#> <#= Pluralize(sig.Args.Length - 1, "argument", "arguments") #>
		/// and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
	}
	else
	{
#>
		/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for a parameterless factory delegate 
		/// which returns an instance of <typeparamref name="TResult" /></summary>
<#+
	}

	ForArgs(sig.Spec, TypeParamRef);
#>
		/// <param name="factory">Required.  The factory delegate that is to be wrapped by the target.</param>
		/// <param name="declaredType">Optional.  The <see cref="ITarget.DeclaredType" /> of the target to be created,
		/// if different from <typeparamref name="TResult" /></param>
<#+
		if(sig.Args.Length > 1)
		{
#>
		/// <remarks>All arguments to the delegate are injected from the container when executed</remarks>
<#+
		}
#>
		public static ITarget ForDelegate<<#= sig.Spec.Args #>>(Func<<#= sig.Text #>> factory, Type declaredType = null)
		{
			if(factory == null) throw new ArgumentNullException(nameof(factory));
<#+
        if(sig.Args.Length > 1)
        {
#>
			return new DelegateTarget(factory, declaredType);
<#+
        }
        else
        {
#>
            return new NullaryDelegateTarget(factory, declaredType);
<#+
        }
#>
		}
<#+
}



void RegisterTargetGroup(GenericSpec spec)
{
	//generates both RegisterTarget extension methods which apply to this generic spec
	ForSignatures(spec, RegisterTarget);
}

void RegisterTarget(Signature sig)
{	
    if(sig.Args.Length > 1)
	{
		if(sig.Args[0] == "IResolveContext")
		{
#>

		/// <summary>Registers a <see cref="Rezolver.Targets.DelegateTarget" /> built from a factory delegate which takes an 
		/// <see cref="IResolveContext" /><#= sig.Args.Length > 2 ? string.Format(" plus {0} other {1},", sig.Args.Length - 2, Pluralize(sig.Args.Length - 2, "argument", "arguments")) : "" #> and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
		else
		{
		#>
		/// <summary>Registers a <see cref="Rezolver.Targets.DelegateTarget" /> built from a factory delegate which takes <#= sig.Args.Length - 1#> <#= Pluralize(sig.Args.Length - 1, "argument", "arguments") #>
		/// and which returns an instance of <typeparamref name="TResult" /></summary>
<#+
		}
	}
	else
	{
#>
		/// <summary>Registers a <see cref="Rezolver.Targets.DelegateTarget" /> built from a parameterless factory delegate 
		/// which returns an instance of <typeparamref name="TResult" /></summary>
<#+
	}
	ForArgs(sig.Spec, TypeParamRef);
#>
		/// <param name="targets">Required.  The <see cref="ITargetContainer" /> into which the newly created target will be registered</param>
		/// <param name="factory">Required.  The factory delegate which is to be executed when an instance is resolved by a container</param>
		/// <param name="declaredType">Optional.  The <see cref="ITarget.DeclaredType" /> of the target to be created
		/// if different from <typeparamref name="TResult" />.  Also overrides the type against which the registration will be made.</param>
        /// <param name="scopeBehaviour">Optional.  Controls how the object generated from the factory delegate will be
        /// tracked if the target is executed within an <see cref="IContainerScope" />.  The default is <see cref="ScopeBehaviour.Implicit" />.</param>
		public static void RegisterDelegate<<#= sig.Spec.Args #>>(this ITargetContainer targets, Func<<#= sig.Text #>> factory, Type declaredType = null, ScopeBehaviour scopeBehaviour = ScopeBehaviour.Implicit)
		{
			targets.RegisterDelegate((Delegate)factory, declaredType, scopeBehaviour);
		}
<#+
}
#>

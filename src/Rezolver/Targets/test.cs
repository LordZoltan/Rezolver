// Generated by test.tt


namespace Rezolver.TargetsTemp
{
	using System;
	using Rezolver.Targets;
	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 0 or 1 parameters</summary>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}

	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 1 or 2 parameters</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<T1, TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<T1, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, T1, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}

	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 2 or 3 parameters</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<T1, T2, TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<T1, T2, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, T1, T2, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}

	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 3 or 4 parameters</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<T1, T2, T3, TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<T1, T2, T3, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, T1, T2, T3, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}

	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 4 or 5 parameters</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<T1, T2, T3, T4, TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<T1, T2, T3, T4, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, T1, T2, T3, T4, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}

	/// <summary>Specialisation of the <see cref="DelegateTarget" /> type for strongly typed delegates
	/// with 5 or 6 parameters</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="T5">Type of parameter 5 or 6 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	/// <remarks>Note - this class exists purely to provide a simpler way to pass inline delegates to a new instance.
	/// the static factory methods also provide the same ability, as does the RegisterDelegate extension method</remarks>
	public class DelegateTarget<T1, T2, T3, T4, T5, TResult> : DelegateTarget
	{
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<T1, T2, T3, T4, T5, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
		/// <summary>Constructs a new instance from the passed strongly typed delegate</summary>
		/// <param name="factory">The delegate that is to be called if the container resolves to this target.</param>
		/// <param name="declaredType">Optional - the <see cref="ITarget.DeclaredType" /> of the new target, if different
		/// from <typeparamref name="TResult" />.</param>
		public DelegateTarget(Func<ResolveContext, T1, T2, T3, T4, T5, TResult> factory, Type declaredType = null)
			: base(factory, declaredType)
		{

		}
	}


} // namespace Rezolver.TargetsTemp

namespace RezolverTemp
{
	using System;
	using Rezolver;
	using Rezolver.Targets;

	public static partial class DelegateTargetContainerExtensions
	{
		/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<TResult>(this ITargetContainer targets, Func<TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<TResult>(this ITargetContainer targets, Func<ResolveContext, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, TResult>(this ITargetContainer targets, Func<T1, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, TResult>(this ITargetContainer targets, Func<ResolveContext, T1, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, TResult>(this ITargetContainer targets, Func<T1, T2, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, TResult>(this ITargetContainer targets, Func<ResolveContext, T1, T2, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, TResult>(this ITargetContainer targets, Func<T1, T2, T3, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, TResult>(this ITargetContainer targets, Func<ResolveContext, T1, T2, T3, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, T4, TResult>(this ITargetContainer targets, Func<T1, T2, T3, T4, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, T4, TResult>(this ITargetContainer targets, Func<ResolveContext, T1, T2, T3, T4, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="T5">Type of parameter 5 or 6 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, T4, T5, TResult>(this ITargetContainer targets, Func<T1, T2, T3, T4, T5, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	/// <summary>Creates a <see cref="Rezolver.Targets.DelegateTarget" /> for the given delegate and registers it in the target container</summary>
	/// <typeparam name="T1">Type of parameter 1 or 2 of the delegate</typeparam>
	/// <typeparam name="T2">Type of parameter 2 or 3 of the delegate</typeparam>
	/// <typeparam name="T3">Type of parameter 3 or 4 of the delegate</typeparam>
	/// <typeparam name="T4">Type of parameter 4 or 5 of the delegate</typeparam>
	/// <typeparam name="T5">Type of parameter 5 or 6 of the delegate</typeparam>
	/// <typeparam name="TResult">The type of the object produced by the factory.</typeparam>
	public static void RegisterDelegate<T1, T2, T3, T4, T5, TResult>(this ITargetContainer targets, Func<ResolveContext, T1, T2, T3, T4, T5, TResult> factory, Type declaredType = null)
	{
		targets.RegisterDelegate((Delegate)factory, declaredType);
	}
	}
}


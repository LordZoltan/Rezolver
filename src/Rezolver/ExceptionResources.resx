<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
  <data name="DeclaredTypeIsNotCompatible_Format" xml:space="preserve">
    <value>The declared type {0} is not compatible with the type {1}</value>
  </data>
  <data name="PathIsInvalid" xml:space="preserve">
    <value>The path {0} is invalid.  All path steps must contain non-whitespace characters and be at least one character in length</value>
  </data>
  <data name="TargetDoesntSupportType_Format" xml:space="preserve">
    <value>The target does not support the type {0}</value>
  </data>
  <data name="TargetIsNullButTypeIsNotNullable_Format" xml:space="preserve">
    <value>The type {0} is not a nullable type</value>
  </data>
  <data name="TypeIsAlreadyRegistered" xml:space="preserve">
    <value>The type {0} has already been registered</value>
  </data>
  <data name="PathIsAtEnd" xml:space="preserve">
    <value>path's Next must not be null - pass path as null once it's reached the last item</value>
  </data>
  <data name="LambdaBodyIsNotNewExpressionFormat" xml:space="preserve">
    <value>The body of the lambda "{0}" is not a NewExpression</value>
  </data>
  <data name="NoDefaultOrAllOptionalConstructorFormat" xml:space="preserve">
    <value>The type {0} has no default constructor, nor any constructors where all the parameters are optional.</value>
  </data>
  <data name="NotRuntimeMethod" xml:space="preserve">
    <value>This method is not to be called at run-time - it is only used for static expression analysis in creating IRezolveTargets for an IRezolveBuilder</value>
  </data>
  <data name="UnableToResolveTypeFromBuilderFormat" xml:space="preserve">
    <value>Unable to resolve type {0} from builder</value>
  </data>
  <data name="NoPublicConstructorsDefinedFormat" xml:space="preserve">
    <value>No public constructors declared on the type {0}</value>
  </data>
  <data name="MoreThanOneConstructorFormat" xml:space="preserve">
    <value>More than one constructor for {0} qualifies as a target for Auto construction</value>
  </data>
  <data name="NoConstructorSetOnNewExpression" xml:space="preserve">
    <value>No constructor has been set on the NewExpression - this is not allowed.</value>
  </data>
  <data name="CyclicDependencyDetectedInTargetFormat" xml:space="preserve">
    <value>Cyclic dependency detected in targets - current target of type {0} with DeclaredType of {1} has tried to include itself in its expression.</value>
  </data>
  <data name="MoreThanOneObjectFoundInScope" xml:space="preserve">
    <value>More than one matching object was found in the scope</value>
  </data>
  <data name="ScopedSingletonRequiresAScope" xml:space="preserve">
    <value>A lifetime scope is required for a scoped singleton</value>
  </data>
  <data name="LambdaBodyNewExpressionIsWrongTypeFormat" xml:space="preserve">
    <value>The expression {0} does not represent calling a constructor of the type {1}</value>
  </data>
  <data name="TargetReturnedNullExpressionFormat" xml:space="preserve">
    <value>Target of type {0} returned a null expression for context {1} - implementation is invalid, targets must never return a null expression.</value>
  </data>
  <data name="RezolverTargetEntryHasBeenRealised" xml:space="preserve">
    <value>No more targets can be added to this entry</value>
  </data>
</root>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
// a little T4 include to help generate somme of the generics that we have in this project - which require the same code but for different
// sets of generic parameters.  It's not fantastic, but it does exactly what's needed here.
public class GenericSpec
{
    // the generic arguments of the overall class/method group etc
	public string Args { get; set; }
	// the allowed generic signatures for the methods' argument
	public string[] Signatures { get; set; }

	private GenericSpecArg[] _argsSpec;
	public GenericSpecArg[] ArgsSpec
	{
		get
		{
			if(_argsSpec == null)
			{
				_argsSpec = Args.Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
							.Select((s, i) => {
								int pos = i;
								var matcher = new Regex("\\d+$");
								var result = matcher.Match(s);
								if(result.Success) pos = int.Parse(result.Value);
								return new GenericSpecArg { Spec = this, Name = s, Pos = pos };
							}).ToArray();
			}
			return _argsSpec;
		}
	}

	public int ArgCount
	{
		get { return ArgsSpec.Length; }
	}

	public IEnumerable<Signature> GetAllSignatures()
	{
		var signatures = Signatures ?? new[] { Args };
		return signatures.Select(s => new Signature { Spec = this, Text = s ?? Args });
	}
}

public class Signature
{
	public GenericSpec Spec { get; set; }
	private string _text;
	public string Text { 
		get
		{
			return _text;
		}
		set
		{
			_text = value;
			_args = (value ?? "")
				.Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
				.Select(s => s.Trim())
				.ToArray();
		}
	}

	private string[] _args;
	public string[] Args
	{
		get
		{
			return _args;
		}
	}
}

public class GenericSpecArg
{
	public GenericSpec Spec { get; set; }
	public string Name { get; set; }

	private int _pos;
	public int Pos { 
		get{
			return _pos;
		} 
		set{
			_pos = value;
			if(value > 0) _nthDescriptor = string.Format("{0}{1}", value, _nthParamDescriptors[Math.Min(value - 1, 3)]);
			else _nthDescriptor = "[unknown]";
		} 
	}

	private static string[] _nthParamDescriptors = new[] { "st", "nd", "rd", "th" };

	private string _nthDescriptor;
	public string nthDescriptor { get { return _nthDescriptor; } }
}

public string Pluralize(int count, string singular, string plural)
{
	return count == 1 ? singular : plural;
}

public void ForSpecs(IEnumerable<GenericSpec> specs, Action<GenericSpec> output)
{
	foreach(var spec in specs)
	{
		output(spec);
	}
}

public void ForArgs(GenericSpec spec, Action<GenericSpecArg> output)
{
	foreach(var argSpec in spec.ArgsSpec)
	{
		output(argSpec);
	}
}

public void ForSignatures(GenericSpec spec, Action<Signature> output)
{
	foreach(var sig in spec.GetAllSignatures())
	{
		output(sig);
	}
}

#>